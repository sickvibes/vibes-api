service: vibes-api

provider:
  name: aws
  stage: ${env:STAGE}
  region: ${env:REGION}
  runtime: nodejs14.x
  httpApi: { cors: true }
  lambdaHashingVersion: "20201221"
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    RPC_ENDPOINT: ${ssm:/${self:provider.stage}/vibes/api/rpc-endpoint}
    PINATA_CONFIG: ${ssm:/${self:provider.stage}/vibes/api/pinata-config}
  iamRoleStatements:
  - Effect: Allow
    Action: dynamodb:*
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/vibes-tokens-${self:provider.stage}-table*
  - Effect: Allow
    Action: sqs:*
    Resource: arn:aws:sqs:${self:provider.region}:*:vibes-pinning-${self:provider.stage}

custom:
  webpack:
    webpackConfig: ./webpack.sls.js

plugins:
  - serverless-webpack

functions:

  # ---
  # api
  # ---

  getTokens:
    handler: src/routes.getTokens
    timeout: 20
    events:
    - httpApi: GET /tokens

  # ---
  # sqs
  # ---

  onPinNftMessage:
    handler: src/service.onPinNftMessage
    reservedConcurrency: 1 # no parallelism to avoid IPFS issues
    timeout: 20
    events:
    - sqs:
        arn: { Fn::GetAtt: [ PinningQueue, Arn ] }
        batchSize: 1

  # ---
  # service
  # ---

  queuePinAll:
    handler: src/service.queuePinAll
    timeout: 30

resources:
  Resources:

    # service db, stores cached metadata and other info
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: vibes-tokens-${self:provider.stage}-table
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: True
        AttributeDefinitions:
        - { AttributeName: hk, AttributeType: S }
        - { AttributeName: sk, AttributeType: S }
        KeySchema:
        - { AttributeName: hk, KeyType: HASH }
        - { AttributeName: sk, KeyType: RANGE }

    # jobs to pin hashes to ipfs
    PinningQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: vibes-pinning-${self:provider.stage}
        VisibilityTimeout: 30
        RedrivePolicy:
          # max received batch size
          maxReceiveCount: 5
          deadLetterTargetArn: { Fn::GetAtt: [ PinningDLQ, Arn ] }

    PinningDLQ:
      Type: AWS::SQS::Queue
